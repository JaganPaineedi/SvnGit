//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SC.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SCMobile : DbContext
    {
        public SCMobile()
            : base("name=SCMobile")
        {
            ((IObjectContextAdapter)this).ObjectContext.CommandTimeout = 54000;
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<GlobalCode> GlobalCodes { get; set; }
        public virtual DbSet<Staff> Staffs { get; set; }
        public virtual DbSet<SystemConfigurationKey> SystemConfigurationKeys { get; set; }
        public virtual DbSet<MobileDashboards> MobileDashboards { get; set; }
        public virtual DbSet<Appointment> Appointments { get; set; }
        public virtual DbSet<Service> Services { get; set; }
        public virtual DbSet<Document> Documents { get; set; }
        public virtual DbSet<DocumentVersion> DocumentVersions { get; set; }
        public virtual DbSet<DocumentCode> DocumentCodes { get; set; }
        public virtual DbSet<ServiceDiagnosi> ServiceDiagnosis { get; set; }
        public virtual DbSet<DiagnosisICD10Codes> DiagnosisICD10Codes { get; set; }
        public virtual DbSet<Screens> Screens { get; set; }
        public virtual DbSet<Programs> Programs { get; set; }
        public virtual DbSet<DocumentPDFGenerationQueue> DocumentPDFGenerationQueue { get; set; }
        public virtual DbSet<MobileBriefcase> MobileBriefcase { get; set; }
        public virtual DbSet<ProcedureCodes> ProcedureCodes { get; set; }
        public virtual DbSet<MobileOrigins> MobileOrigins { get; set; }
        public virtual DbSet<ActiveDirectoryDomains> ActiveDirectoryDomains { get; set; }
        public virtual DbSet<ActiveDirectoryStaff> ActiveDirectoryStaff { get; set; }
        public virtual DbSet<SystemConfigurations> SystemConfigurations { get; set; }
        public virtual DbSet<DocumentServiceNoteGoal> DocumentServiceNoteGoals { get; set; }
        public virtual DbSet<DocumentServiceNoteObjective> DocumentServiceNoteObjectives { get; set; }
        public virtual DbSet<Client> Clients { get; set; }
        public virtual DbSet<Location> Locations { get; set; }
        public virtual DbSet<StaffClientAccess> StaffClientAccess { get; set; }
        public virtual DbSet<MobileRefreshTokens> MobileRefreshTokens { get; set; }
        public virtual DbSet<MobileDevice> MobileDevices { get; set; }
        public virtual DbSet<StaffPreferences> StaffPreferences { get; set; }
        public virtual DbSet<KPIMaster> KPIMasters { get; set; }
    
        public virtual int smsp_SCGetMyCaselod(Nullable<int> sTAFFID, ObjectParameter jsonResult)
        {
            var sTAFFIDParameter = sTAFFID.HasValue ?
                new ObjectParameter("STAFFID", sTAFFID) :
                new ObjectParameter("STAFFID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("smsp_SCGetMyCaselod", sTAFFIDParameter, jsonResult);
        }
    
        public virtual int smsp_SCGetMyCaselod_StringReturn(Nullable<int> sTAFFID, ObjectParameter jsonResult)
        {
            var sTAFFIDParameter = sTAFFID.HasValue ?
                new ObjectParameter("STAFFID", sTAFFID) :
                new ObjectParameter("STAFFID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("smsp_SCGetMyCaselod_StringReturn", sTAFFIDParameter, jsonResult);
        }
    
        public virtual int smsp_SCWDCalendarEvents(string viewType, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string staffList, Nullable<int> loggedInStaffId, Nullable<int> page, Nullable<int> resourcesPerPage, ObjectParameter jsonResult)
        {
            var viewTypeParameter = viewType != null ?
                new ObjectParameter("ViewType", viewType) :
                new ObjectParameter("ViewType", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var staffListParameter = staffList != null ?
                new ObjectParameter("StaffList", staffList) :
                new ObjectParameter("StaffList", typeof(string));
    
            var loggedInStaffIdParameter = loggedInStaffId.HasValue ?
                new ObjectParameter("LoggedInStaffId", loggedInStaffId) :
                new ObjectParameter("LoggedInStaffId", typeof(int));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("Page", page) :
                new ObjectParameter("Page", typeof(int));
    
            var resourcesPerPageParameter = resourcesPerPage.HasValue ?
                new ObjectParameter("ResourcesPerPage", resourcesPerPage) :
                new ObjectParameter("ResourcesPerPage", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("smsp_SCWDCalendarEvents", viewTypeParameter, startDateParameter, endDateParameter, staffListParameter, loggedInStaffIdParameter, pageParameter, resourcesPerPageParameter, jsonResult);
        }
    
        public virtual int smsp_SCWDCalendarEvents_StringReturn(string viewType, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string staffList, Nullable<int> loggedInStaffId, Nullable<int> page, Nullable<int> resourcesPerPage, ObjectParameter jsonResult)
        {
            var viewTypeParameter = viewType != null ?
                new ObjectParameter("ViewType", viewType) :
                new ObjectParameter("ViewType", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var staffListParameter = staffList != null ?
                new ObjectParameter("StaffList", staffList) :
                new ObjectParameter("StaffList", typeof(string));
    
            var loggedInStaffIdParameter = loggedInStaffId.HasValue ?
                new ObjectParameter("LoggedInStaffId", loggedInStaffId) :
                new ObjectParameter("LoggedInStaffId", typeof(int));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("Page", page) :
                new ObjectParameter("Page", typeof(int));
    
            var resourcesPerPageParameter = resourcesPerPage.HasValue ?
                new ObjectParameter("ResourcesPerPage", resourcesPerPage) :
                new ObjectParameter("ResourcesPerPage", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("smsp_SCWDCalendarEvents_StringReturn", viewTypeParameter, startDateParameter, endDateParameter, staffListParameter, loggedInStaffIdParameter, pageParameter, resourcesPerPageParameter, jsonResult);
        }
    
        public virtual ObjectResult<smsp_GetMobileStaffPreference_Result> smsp_GetMobileStaffPreference(Nullable<int> sTAFFID, ObjectParameter jsonResult)
        {
            var sTAFFIDParameter = sTAFFID.HasValue ?
                new ObjectParameter("STAFFID", sTAFFID) :
                new ObjectParameter("STAFFID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<smsp_GetMobileStaffPreference_Result>("smsp_GetMobileStaffPreference", sTAFFIDParameter, jsonResult);
        }
    
        public virtual int smsp_GetMobileStaffPreference_StringReturn(Nullable<int> sTAFFID, ObjectParameter jsonResult)
        {
            var sTAFFIDParameter = sTAFFID.HasValue ?
                new ObjectParameter("STAFFID", sTAFFID) :
                new ObjectParameter("STAFFID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("smsp_GetMobileStaffPreference_StringReturn", sTAFFIDParameter, jsonResult);
        }
    
        public virtual int smsp_GetStaffListForTeamScheduling(Nullable<long> sTAFFID, ObjectParameter jsonResult)
        {
            var sTAFFIDParameter = sTAFFID.HasValue ?
                new ObjectParameter("STAFFID", sTAFFID) :
                new ObjectParameter("STAFFID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("smsp_GetStaffListForTeamScheduling", sTAFFIDParameter, jsonResult);
        }
    
        public virtual int smsp_GetStaffListForTeamScheduling_StringReturn(Nullable<long> sTAFFID, ObjectParameter jsonResult)
        {
            var sTAFFIDParameter = sTAFFID.HasValue ?
                new ObjectParameter("STAFFID", sTAFFID) :
                new ObjectParameter("STAFFID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("smsp_GetStaffListForTeamScheduling_StringReturn", sTAFFIDParameter, jsonResult);
        }
    
        public virtual int smsp_GetCustomFieldJson_StringReturn(Nullable<int> sERVICEID, ObjectParameter jsonResult)
        {
            var sERVICEIDParameter = sERVICEID.HasValue ?
                new ObjectParameter("SERVICEID", sERVICEID) :
                new ObjectParameter("SERVICEID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("smsp_GetCustomFieldJson_StringReturn", sERVICEIDParameter, jsonResult);
        }
    
        public virtual int smsp_GetServiceDiagnosis_StringReturn(Nullable<int> sERVICEID, ObjectParameter jsonResult)
        {
            var sERVICEIDParameter = sERVICEID.HasValue ?
                new ObjectParameter("SERVICEID", sERVICEID) :
                new ObjectParameter("SERVICEID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("smsp_GetServiceDiagnosis_StringReturn", sERVICEIDParameter, jsonResult);
        }
    
        public virtual int smsp_SCGetMyCaselod1(Nullable<int> sTAFFID, ObjectParameter jsonResult)
        {
            var sTAFFIDParameter = sTAFFID.HasValue ?
                new ObjectParameter("STAFFID", sTAFFID) :
                new ObjectParameter("STAFFID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("smsp_SCGetMyCaselod1", sTAFFIDParameter, jsonResult);
        }
    
        public virtual int smsp_GetMobileStaffPreference1(Nullable<int> sTAFFID, ObjectParameter jsonResult)
        {
            var sTAFFIDParameter = sTAFFID.HasValue ?
                new ObjectParameter("STAFFID", sTAFFID) :
                new ObjectParameter("STAFFID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("smsp_GetMobileStaffPreference1", sTAFFIDParameter, jsonResult);
        }
    
        public virtual int smsp_GetStaffListForTeamScheduling1(Nullable<long> sTAFFID, ObjectParameter jsonResult)
        {
            var sTAFFIDParameter = sTAFFID.HasValue ?
                new ObjectParameter("STAFFID", sTAFFID) :
                new ObjectParameter("STAFFID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("smsp_GetStaffListForTeamScheduling1", sTAFFIDParameter, jsonResult);
        }
    
        public virtual ObjectResult<smsp_GetServiceDropDownValues_Result> smsp_GetServiceDropDownValues(Nullable<int> sTAFFID)
        {
            var sTAFFIDParameter = sTAFFID.HasValue ?
                new ObjectParameter("STAFFID", sTAFFID) :
                new ObjectParameter("STAFFID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<smsp_GetServiceDropDownValues_Result>("smsp_GetServiceDropDownValues", sTAFFIDParameter);
        }
    
        public virtual int smsp_GetServiceDiagnosis(Nullable<int> sERVICEID, ObjectParameter jsonResult)
        {
            var sERVICEIDParameter = sERVICEID.HasValue ?
                new ObjectParameter("SERVICEID", sERVICEID) :
                new ObjectParameter("SERVICEID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("smsp_GetServiceDiagnosis", sERVICEIDParameter, jsonResult);
        }
    
        public virtual int smsp_GetCustomFieldJson(Nullable<int> sERVICEID, ObjectParameter jsonResult)
        {
            var sERVICEIDParameter = sERVICEID.HasValue ?
                new ObjectParameter("SERVICEID", sERVICEID) :
                new ObjectParameter("SERVICEID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("smsp_GetCustomFieldJson", sERVICEIDParameter, jsonResult);
        }
    
        public virtual int ssp_SCLogError(string errorMessage, string verboseInfo, string errorType, string createdBy, Nullable<System.DateTime> createdDate, string datasetInfo)
        {
            var errorMessageParameter = errorMessage != null ?
                new ObjectParameter("ErrorMessage", errorMessage) :
                new ObjectParameter("ErrorMessage", typeof(string));
    
            var verboseInfoParameter = verboseInfo != null ?
                new ObjectParameter("VerboseInfo", verboseInfo) :
                new ObjectParameter("VerboseInfo", typeof(string));
    
            var errorTypeParameter = errorType != null ?
                new ObjectParameter("ErrorType", errorType) :
                new ObjectParameter("ErrorType", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var datasetInfoParameter = datasetInfo != null ?
                new ObjectParameter("DatasetInfo", datasetInfo) :
                new ObjectParameter("DatasetInfo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ssp_SCLogError", errorMessageParameter, verboseInfoParameter, errorTypeParameter, createdByParameter, createdDateParameter, datasetInfoParameter);
        }
    
        public virtual int smsp_GetSystemConfigurationKeyValue(string kEYNAME, ObjectParameter value)
        {
            var kEYNAMEParameter = kEYNAME != null ?
                new ObjectParameter("KEYNAME", kEYNAME) :
                new ObjectParameter("KEYNAME", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("smsp_GetSystemConfigurationKeyValue", kEYNAMEParameter, value);
        }
    
        public virtual int Smsp_ExecutePostSignatureLogic(Nullable<int> sERVICEID, Nullable<int> loggedInUser)
        {
            var sERVICEIDParameter = sERVICEID.HasValue ?
                new ObjectParameter("SERVICEID", sERVICEID) :
                new ObjectParameter("SERVICEID", typeof(int));
    
            var loggedInUserParameter = loggedInUser.HasValue ?
                new ObjectParameter("LoggedInUser", loggedInUser) :
                new ObjectParameter("LoggedInUser", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Smsp_ExecutePostSignatureLogic", sERVICEIDParameter, loggedInUserParameter);
        }
    
        public virtual int Smsp_ExecutePostUpdateLogic(Nullable<int> sERVICEID, Nullable<int> loggedInUser)
        {
            var sERVICEIDParameter = sERVICEID.HasValue ?
                new ObjectParameter("SERVICEID", sERVICEID) :
                new ObjectParameter("SERVICEID", typeof(int));
    
            var loggedInUserParameter = loggedInUser.HasValue ?
                new ObjectParameter("LoggedInUser", loggedInUser) :
                new ObjectParameter("LoggedInUser", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Smsp_ExecutePostUpdateLogic", sERVICEIDParameter, loggedInUserParameter);
        }
    
        public virtual int ssp_PMUpdateClientBalance(Nullable<int> clientId, string userId, Nullable<System.DateTime> dateReceived, string nameIfNotClient, Nullable<int> paymentMethod, string referenceNumber, string cardNumber, string expirationDate, Nullable<decimal> amount, Nullable<int> locationId, Nullable<int> paymentSource, string comment, Nullable<int> serviceId, Nullable<int> typeOfPosting, string copaymentAmounts)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var dateReceivedParameter = dateReceived.HasValue ?
                new ObjectParameter("DateReceived", dateReceived) :
                new ObjectParameter("DateReceived", typeof(System.DateTime));
    
            var nameIfNotClientParameter = nameIfNotClient != null ?
                new ObjectParameter("NameIfNotClient", nameIfNotClient) :
                new ObjectParameter("NameIfNotClient", typeof(string));
    
            var paymentMethodParameter = paymentMethod.HasValue ?
                new ObjectParameter("PaymentMethod", paymentMethod) :
                new ObjectParameter("PaymentMethod", typeof(int));
    
            var referenceNumberParameter = referenceNumber != null ?
                new ObjectParameter("ReferenceNumber", referenceNumber) :
                new ObjectParameter("ReferenceNumber", typeof(string));
    
            var cardNumberParameter = cardNumber != null ?
                new ObjectParameter("CardNumber", cardNumber) :
                new ObjectParameter("CardNumber", typeof(string));
    
            var expirationDateParameter = expirationDate != null ?
                new ObjectParameter("ExpirationDate", expirationDate) :
                new ObjectParameter("ExpirationDate", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(int));
    
            var paymentSourceParameter = paymentSource.HasValue ?
                new ObjectParameter("PaymentSource", paymentSource) :
                new ObjectParameter("PaymentSource", typeof(int));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(int));
    
            var typeOfPostingParameter = typeOfPosting.HasValue ?
                new ObjectParameter("TypeOfPosting", typeOfPosting) :
                new ObjectParameter("TypeOfPosting", typeof(int));
    
            var copaymentAmountsParameter = copaymentAmounts != null ?
                new ObjectParameter("CopaymentAmounts", copaymentAmounts) :
                new ObjectParameter("CopaymentAmounts", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ssp_PMUpdateClientBalance", clientIdParameter, userIdParameter, dateReceivedParameter, nameIfNotClientParameter, paymentMethodParameter, referenceNumberParameter, cardNumberParameter, expirationDateParameter, amountParameter, locationIdParameter, paymentSourceParameter, commentParameter, serviceIdParameter, typeOfPostingParameter, copaymentAmountsParameter);
        }
    
        public virtual int smsp_GetAddress(Nullable<int> clientId, string text, string type, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, ObjectParameter jsonResult)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var textParameter = text != null ?
                new ObjectParameter("Text", text) :
                new ObjectParameter("Text", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("smsp_GetAddress", clientIdParameter, textParameter, typeParameter, fromDateParameter, toDateParameter, jsonResult);
        }
    
        public virtual int smsp_GetAnnotation(Nullable<int> clientId, string text, string type, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, ObjectParameter jsonResult)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var textParameter = text != null ?
                new ObjectParameter("Text", text) :
                new ObjectParameter("Text", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("smsp_GetAnnotation", clientIdParameter, textParameter, typeParameter, fromDateParameter, toDateParameter, jsonResult);
        }
    
        public virtual int smsp_GetAttachment(Nullable<int> clientId, string text, string type, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, ObjectParameter jsonResult)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var textParameter = text != null ?
                new ObjectParameter("Text", text) :
                new ObjectParameter("Text", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("smsp_GetAttachment", clientIdParameter, textParameter, typeParameter, fromDateParameter, toDateParameter, jsonResult);
        }
    
        public virtual int smsp_GetClientId(string sSN, string firstName, string lastName, Nullable<System.DateTime> dOB, ObjectParameter jsonResult)
        {
            var sSNParameter = sSN != null ?
                new ObjectParameter("SSN", sSN) :
                new ObjectParameter("SSN", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("smsp_GetClientId", sSNParameter, firstNameParameter, lastNameParameter, dOBParameter, jsonResult);
        }
    
        public virtual int smsp_GetCodeableConcept(Nullable<int> clientId, string text, string type, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, ObjectParameter jsonResult)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var textParameter = text != null ?
                new ObjectParameter("Text", text) :
                new ObjectParameter("Text", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("smsp_GetCodeableConcept", clientIdParameter, textParameter, typeParameter, fromDateParameter, toDateParameter, jsonResult);
        }
    
        public virtual int smsp_GetHumanName(Nullable<int> clientId, string text, string type, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, ObjectParameter jsonResult)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var textParameter = text != null ?
                new ObjectParameter("Text", text) :
                new ObjectParameter("Text", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("smsp_GetHumanName", clientIdParameter, textParameter, typeParameter, fromDateParameter, toDateParameter, jsonResult);
        }
    
        public virtual int smsp_GetIdentifier(Nullable<int> clientId, string type, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, ObjectParameter jsonResult)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("smsp_GetIdentifier", clientIdParameter, typeParameter, fromDateParameter, toDateParameter, jsonResult);
        }
    
        public virtual int smsp_GetMetaData(Nullable<int> clientId, string text, string type, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, ObjectParameter jsonResult)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var textParameter = text != null ?
                new ObjectParameter("Text", text) :
                new ObjectParameter("Text", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("smsp_GetMetaData", clientIdParameter, textParameter, typeParameter, fromDateParameter, toDateParameter, jsonResult);
        }
    
        public virtual int smsp_GetPatientContactPerson(Nullable<int> clientId, string type, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, ObjectParameter jsonResult)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("smsp_GetPatientContactPerson", clientIdParameter, typeParameter, fromDateParameter, toDateParameter, jsonResult);
        }
    
        public virtual int smsp_GetQuantity(Nullable<int> clientId, string text, string type, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, ObjectParameter jsonResult)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var textParameter = text != null ?
                new ObjectParameter("Text", text) :
                new ObjectParameter("Text", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("smsp_GetQuantity", clientIdParameter, textParameter, typeParameter, fromDateParameter, toDateParameter, jsonResult);
        }
    
        public virtual int smsp_GetTelecom(Nullable<int> clientId, string text, string type, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, ObjectParameter jsonResult)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var textParameter = text != null ?
                new ObjectParameter("Text", text) :
                new ObjectParameter("Text", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("smsp_GetTelecom", clientIdParameter, textParameter, typeParameter, fromDateParameter, toDateParameter, jsonResult);
        }
    
        public virtual int smsp_GetTiming(Nullable<int> clientId, string text, string type, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, ObjectParameter jsonResult)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var textParameter = text != null ?
                new ObjectParameter("Text", text) :
                new ObjectParameter("Text", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("smsp_GetTiming", clientIdParameter, textParameter, typeParameter, fromDateParameter, toDateParameter, jsonResult);
        }
    
        public virtual int ssp_GetActiveProblems(Nullable<int> clientId, string type, Nullable<int> documentVersionId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, ObjectParameter jsonResult)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var documentVersionIdParameter = documentVersionId.HasValue ?
                new ObjectParameter("DocumentVersionId", documentVersionId) :
                new ObjectParameter("DocumentVersionId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ssp_GetActiveProblems", clientIdParameter, typeParameter, documentVersionIdParameter, fromDateParameter, toDateParameter, jsonResult);
        }
    
        public virtual int ssp_GetAllergies(Nullable<int> clientId, string type, Nullable<int> documentVersionId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, ObjectParameter jsonResult)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var documentVersionIdParameter = documentVersionId.HasValue ?
                new ObjectParameter("DocumentVersionId", documentVersionId) :
                new ObjectParameter("DocumentVersionId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ssp_GetAllergies", clientIdParameter, typeParameter, documentVersionIdParameter, fromDateParameter, toDateParameter, jsonResult);
        }
    
        public virtual int ssp_GetCareTeamMembers(Nullable<int> clientId, string type, Nullable<int> documentVersionId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, ObjectParameter jsonResult)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var documentVersionIdParameter = documentVersionId.HasValue ?
                new ObjectParameter("DocumentVersionId", documentVersionId) :
                new ObjectParameter("DocumentVersionId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ssp_GetCareTeamMembers", clientIdParameter, typeParameter, documentVersionIdParameter, fromDateParameter, toDateParameter, jsonResult);
        }
    
        public virtual int ssp_GetCurrentMedications(Nullable<int> clientId, string type, Nullable<int> documentVersionId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, ObjectParameter jsonResult)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var documentVersionIdParameter = documentVersionId.HasValue ?
                new ObjectParameter("DocumentVersionId", documentVersionId) :
                new ObjectParameter("DocumentVersionId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ssp_GetCurrentMedications", clientIdParameter, typeParameter, documentVersionIdParameter, fromDateParameter, toDateParameter, jsonResult);
        }
    
        public virtual int ssp_GetGoals(Nullable<int> clientId, string type, Nullable<int> documentVersionId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, ObjectParameter jsonResult)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var documentVersionIdParameter = documentVersionId.HasValue ?
                new ObjectParameter("DocumentVersionId", documentVersionId) :
                new ObjectParameter("DocumentVersionId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ssp_GetGoals", clientIdParameter, typeParameter, documentVersionIdParameter, fromDateParameter, toDateParameter, jsonResult);
        }
    
        public virtual int ssp_GetHistoryOfProcedures(Nullable<int> clientId, string type, Nullable<int> documentVersionId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, ObjectParameter jsonResult)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var documentVersionIdParameter = documentVersionId.HasValue ?
                new ObjectParameter("DocumentVersionId", documentVersionId) :
                new ObjectParameter("DocumentVersionId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ssp_GetHistoryOfProcedures", clientIdParameter, typeParameter, documentVersionIdParameter, fromDateParameter, toDateParameter, jsonResult);
        }
    
        public virtual int ssp_GetImmunizations(Nullable<int> clientId, string type, Nullable<int> documentVersionId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, ObjectParameter jsonResult)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var documentVersionIdParameter = documentVersionId.HasValue ?
                new ObjectParameter("DocumentVersionId", documentVersionId) :
                new ObjectParameter("DocumentVersionId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ssp_GetImmunizations", clientIdParameter, typeParameter, documentVersionIdParameter, fromDateParameter, toDateParameter, jsonResult);
        }
    
        public virtual int ssp_GetLaboratoryTests(Nullable<int> clientId, string type, Nullable<int> documentVersionId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, ObjectParameter jsonResult)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var documentVersionIdParameter = documentVersionId.HasValue ?
                new ObjectParameter("DocumentVersionId", documentVersionId) :
                new ObjectParameter("DocumentVersionId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ssp_GetLaboratoryTests", clientIdParameter, typeParameter, documentVersionIdParameter, fromDateParameter, toDateParameter, jsonResult);
        }
    
        public virtual int ssp_GetMostRecentEncounters(Nullable<int> clientId, string type, Nullable<int> documentVersionId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, ObjectParameter jsonResult)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var documentVersionIdParameter = documentVersionId.HasValue ?
                new ObjectParameter("DocumentVersionId", documentVersionId) :
                new ObjectParameter("DocumentVersionId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ssp_GetMostRecentEncounters", clientIdParameter, typeParameter, documentVersionIdParameter, fromDateParameter, toDateParameter, jsonResult);
        }
    
        public virtual int ssp_GetPatientDemographicDetails(Nullable<int> clientId, string type, Nullable<int> documentVersionId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, ObjectParameter jsonResult)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var documentVersionIdParameter = documentVersionId.HasValue ?
                new ObjectParameter("DocumentVersionId", documentVersionId) :
                new ObjectParameter("DocumentVersionId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ssp_GetPatientDemographicDetails", clientIdParameter, typeParameter, documentVersionIdParameter, fromDateParameter, toDateParameter, jsonResult);
        }
    
        public virtual int ssp_GetPlanOfTreatment(Nullable<int> clientId, string type, Nullable<int> documentVersionId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, ObjectParameter jsonResult)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var documentVersionIdParameter = documentVersionId.HasValue ?
                new ObjectParameter("DocumentVersionId", documentVersionId) :
                new ObjectParameter("DocumentVersionId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ssp_GetPlanOfTreatment", clientIdParameter, typeParameter, documentVersionIdParameter, fromDateParameter, toDateParameter, jsonResult);
        }
    
        public virtual int ssp_GetStudiesSummary(Nullable<int> clientId, string type, Nullable<int> documentVersionId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, ObjectParameter jsonResult)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var documentVersionIdParameter = documentVersionId.HasValue ?
                new ObjectParameter("DocumentVersionId", documentVersionId) :
                new ObjectParameter("DocumentVersionId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ssp_GetStudiesSummary", clientIdParameter, typeParameter, documentVersionIdParameter, fromDateParameter, toDateParameter, jsonResult);
        }
    
        public virtual int ssp_GetUDI(Nullable<int> clientId, string type, Nullable<int> documentVersionId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, ObjectParameter jsonResult)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var documentVersionIdParameter = documentVersionId.HasValue ?
                new ObjectParameter("DocumentVersionId", documentVersionId) :
                new ObjectParameter("DocumentVersionId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ssp_GetUDI", clientIdParameter, typeParameter, documentVersionIdParameter, fromDateParameter, toDateParameter, jsonResult);
        }
    
        public virtual int ssp_GetVitalSigns(Nullable<int> clientId, string type, Nullable<int> documentVersionId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, ObjectParameter jsonResult)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var documentVersionIdParameter = documentVersionId.HasValue ?
                new ObjectParameter("DocumentVersionId", documentVersionId) :
                new ObjectParameter("DocumentVersionId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ssp_GetVitalSigns", clientIdParameter, typeParameter, documentVersionIdParameter, fromDateParameter, toDateParameter, jsonResult);
        }
    
        public virtual int ssp_GetSummaryOfCareCCDXML(Nullable<int> clientId, string type, Nullable<int> documentVersionId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, ObjectParameter outputComponentXML)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var documentVersionIdParameter = documentVersionId.HasValue ?
                new ObjectParameter("DocumentVersionId", documentVersionId) :
                new ObjectParameter("DocumentVersionId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ssp_GetSummaryOfCareCCDXML", clientIdParameter, typeParameter, documentVersionIdParameter, fromDateParameter, toDateParameter, outputComponentXML);
        }
    
        public virtual int ssp_GetHealthConcerns(Nullable<int> clientId, string type, Nullable<int> documentVersionId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, ObjectParameter jsonResult)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var documentVersionIdParameter = documentVersionId.HasValue ?
                new ObjectParameter("DocumentVersionId", documentVersionId) :
                new ObjectParameter("DocumentVersionId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ssp_GetHealthConcerns", clientIdParameter, typeParameter, documentVersionIdParameter, fromDateParameter, toDateParameter, jsonResult);
        }
    
        public virtual ObjectResult<smsp_GetDocuments_Result> smsp_GetDocuments(Nullable<int> staffId)
        {
            var staffIdParameter = staffId.HasValue ?
                new ObjectParameter("StaffId", staffId) :
                new ObjectParameter("StaffId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<smsp_GetDocuments_Result>("smsp_GetDocuments", staffIdParameter);
        }
    
        public virtual int Smsp_GetProgramClinicians(Nullable<int> clientId, ObjectParameter jsonResult)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Smsp_GetProgramClinicians", clientIdParameter, jsonResult);
        }
    
        public virtual int smsp_PMAppointmentSearch(string sessionId, Nullable<int> clientId, Nullable<int> staffId, Nullable<int> duration, Nullable<System.TimeSpan> fromTime, Nullable<System.TimeSpan> toTime, Nullable<System.DateTime> startDate, ObjectParameter jsonResult)
        {
            var sessionIdParameter = sessionId != null ?
                new ObjectParameter("SessionId", sessionId) :
                new ObjectParameter("SessionId", typeof(string));
    
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var staffIdParameter = staffId.HasValue ?
                new ObjectParameter("StaffId", staffId) :
                new ObjectParameter("StaffId", typeof(int));
    
            var durationParameter = duration.HasValue ?
                new ObjectParameter("Duration", duration) :
                new ObjectParameter("Duration", typeof(int));
    
            var fromTimeParameter = fromTime.HasValue ?
                new ObjectParameter("FromTime", fromTime) :
                new ObjectParameter("FromTime", typeof(System.TimeSpan));
    
            var toTimeParameter = toTime.HasValue ?
                new ObjectParameter("ToTime", toTime) :
                new ObjectParameter("ToTime", typeof(System.TimeSpan));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("smsp_PMAppointmentSearch", sessionIdParameter, clientIdParameter, staffIdParameter, durationParameter, fromTimeParameter, toTimeParameter, startDateParameter, jsonResult);
        }
    
        public virtual int smsp_GetPatientDocuments(Nullable<int> clientId, Nullable<int> clinicianId, Nullable<int> authorIdFilter, Nullable<int> statusFilter, Nullable<int> dueDaysFilter, Nullable<int> loggedInStaffId, Nullable<System.DateTime> dosFrom, Nullable<System.DateTime> dosTo, string includeErrorDocument, Nullable<int> documentNavigationId, ObjectParameter jsonResult)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var clinicianIdParameter = clinicianId.HasValue ?
                new ObjectParameter("ClinicianId", clinicianId) :
                new ObjectParameter("ClinicianId", typeof(int));
    
            var authorIdFilterParameter = authorIdFilter.HasValue ?
                new ObjectParameter("AuthorIdFilter", authorIdFilter) :
                new ObjectParameter("AuthorIdFilter", typeof(int));
    
            var statusFilterParameter = statusFilter.HasValue ?
                new ObjectParameter("StatusFilter", statusFilter) :
                new ObjectParameter("StatusFilter", typeof(int));
    
            var dueDaysFilterParameter = dueDaysFilter.HasValue ?
                new ObjectParameter("DueDaysFilter", dueDaysFilter) :
                new ObjectParameter("DueDaysFilter", typeof(int));
    
            var loggedInStaffIdParameter = loggedInStaffId.HasValue ?
                new ObjectParameter("LoggedInStaffId", loggedInStaffId) :
                new ObjectParameter("LoggedInStaffId", typeof(int));
    
            var dosFromParameter = dosFrom.HasValue ?
                new ObjectParameter("DosFrom", dosFrom) :
                new ObjectParameter("DosFrom", typeof(System.DateTime));
    
            var dosToParameter = dosTo.HasValue ?
                new ObjectParameter("DosTo", dosTo) :
                new ObjectParameter("DosTo", typeof(System.DateTime));
    
            var includeErrorDocumentParameter = includeErrorDocument != null ?
                new ObjectParameter("IncludeErrorDocument", includeErrorDocument) :
                new ObjectParameter("IncludeErrorDocument", typeof(string));
    
            var documentNavigationIdParameter = documentNavigationId.HasValue ?
                new ObjectParameter("DocumentNavigationId", documentNavigationId) :
                new ObjectParameter("DocumentNavigationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("smsp_GetPatientDocuments", clientIdParameter, clinicianIdParameter, authorIdFilterParameter, statusFilterParameter, dueDaysFilterParameter, loggedInStaffIdParameter, dosFromParameter, dosToParameter, includeErrorDocumentParameter, documentNavigationIdParameter, jsonResult);
        }
    
        public virtual int ssp_GetSocialHistoryMU3(Nullable<int> clientId, string type, Nullable<int> documentVersionId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, ObjectParameter jsonResult)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var documentVersionIdParameter = documentVersionId.HasValue ?
                new ObjectParameter("DocumentVersionId", documentVersionId) :
                new ObjectParameter("DocumentVersionId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ssp_GetSocialHistoryMU3", clientIdParameter, typeParameter, documentVersionIdParameter, fromDateParameter, toDateParameter, jsonResult);
        }
    }
}
